"use strict";(self.webpackChunkmoving_average_plus_docs=self.webpackChunkmoving_average_plus_docs||[]).push([[9565],{9091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(4848),r=t(8453);const a={sidebar_position:1},i="\ud83d\udce5 Push",o={id:"mvavg-methods/input-output/push",title:"\ud83d\udce5 Push",description:"Inserts a new element in the internal array and returns a pointer.",source:"@site/docs/mvavg-methods/input-output/push.md",sourceDirName:"mvavg-methods/input-output",slug:"/mvavg-methods/input-output/push",permalink:"/DataTomeDocs/docs/mvavg-methods/input-output/push",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mvavg-methods/input-output/push.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Input/Output Methods",permalink:"/DataTomeDocs/docs/category/inputoutput-methods"},next:{title:"\ud83d\udce4 Get",permalink:"/DataTomeDocs/docs/mvavg-methods/input-output/get"}},u={},l=[{value:"\ud83d\udcdd Syntax",id:"-syntax",level:3},{value:"\ud83d\udd2e Example",id:"-example",level:3},{value:"\u23f1 Complexity",id:"-complexity",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"-push",children:"\ud83d\udce5 Push"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inserts"})," a ",(0,s.jsx)(n.strong,{children:"new element"})," in the internal array and ",(0,s.jsx)(n.strong,{children:"returns"})," a pointer.\n",(0,s.jsxs)(n.em,{children:["Methods that ",(0,s.jsx)(n.strong,{children:"return pointers"})," allow ",(0,s.jsx)(n.strong,{children:"chained calls"}),"."]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"DataTomeMvAvg<unsigned int> intAverage(10);\n\nunsigned int x = 5, y = 10;\nunsigned int result, first, last;\n\nresult = intAverage.push(x).push(y).get();\nfirst = intAverage.push(56).front();\nlast = intAverage.push(8).back();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-syntax",children:"\ud83d\udcdd Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"DataTomeMvAvg<TypeOfArray, TypeOfSum> &push(TypeOfArray input)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inserts"})," the ",(0,s.jsx)(n.strong,{children:"input"})," of type ",(0,s.jsx)(n.strong,{children:"TypeOfArray"})," at the end of the ",(0,s.jsx)(n.strong,{children:"array"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-example",children:"\ud83d\udd2e Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"// This will create an MovingAverage of size 5 and unsigned type\n// Array: 0 0 0 0 0\nDataTomeMvAvg<unsigned int> intAverage(5);\n\n// Array: 6\nintAverage.push(6);\n\n// Array: 1 6\n// Array: 2 1 6\n// Array: 3 2 1 6\n// Array: 4 3 2 1 6\nfor(int i = 1; i < 5; i++){\n    intAverage.push(i);\n}\n\n// Array: 21 1 2 3 4\nintAverage.push(21);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-complexity",children:"\u23f1 Complexity"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Constant (O(1))"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);